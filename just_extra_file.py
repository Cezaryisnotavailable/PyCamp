import timeit


def find_two_multipliers_for_product(product):
    product = int(product)
    list_of_multipliers = list(range(1, 10))
    multipliers = []
    for i in list_of_multipliers:
        for j in list_of_multipliers:
            if i * j == product:
                multipliers.append((i, j))
    return multipliers


def find_three_multipliers_for_product(product):
    product = int(product)
    list_of_multipliers = list(range(1, 10))
    multipliers = []
    for i in list_of_multipliers:
        for j in list_of_multipliers:
            for k in list_of_multipliers:
                if i != j and i != k and j != k:
                    if i * j * k == product:
                        multipliers.append((i, j, k))
    return multipliers


# Generated by Model: GPT-4 - refactored def find_three_multipliers_for_product(product)
def find_three_multipliers_for_product_gpt4(product):
    product = int(product)
    multipliers = []

    for i in range(1, 10):
        for j in range(i+1, 10):
            k = product / (i * j)
            if k.is_integer() and j < k < 10:
                multipliers.extend(
                    [(i, j, int(k)), (i, int(k), j), (j, i, int(k)), (j, int(k), i), (int(k), i, j), (int(k), j, i)]
                )

    return multipliers


two_multipliers = find_two_multipliers_for_product(36)
print(two_multipliers)

start_time = timeit.default_timer()
three_multipliers = find_three_multipliers_for_product(36)
end_time = timeit.default_timer()
execution_time = end_time - start_time
print(f"Execution time: {execution_time:.10f} seconds")
print(three_multipliers)

start_time = timeit.default_timer()
result = find_three_multipliers_for_product_gpt4(36)
end_time = timeit.default_timer()
execution_time = end_time - start_time
print(f"Execution time: {execution_time:.10f} seconds")
print(result)


